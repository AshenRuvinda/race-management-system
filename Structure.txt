race-management-system/
â”œâ”€â”€ backend/
â”‚   â”œâ”€â”€ config/
â”‚   â”‚   â”œâ”€â”€ db.js                # MongoDB connection
â”‚   â”‚   â””â”€â”€ socket.js            # Socket.IO setup
â”‚   â”‚
â”‚   â”œâ”€â”€ controllers/             # Business logic
â”‚   â”‚   â”œâ”€â”€ authController.js
â”‚   â”‚   â”œâ”€â”€ teamController.js
â”‚   â”‚   â”œâ”€â”€ racerController.js
â”‚   â”‚   â”œâ”€â”€ raceController.js
â”‚   â”‚   â””â”€â”€ eventController.js
â”‚   â”‚
â”‚   â”œâ”€â”€ models/                  # Mongoose schemas
â”‚   â”‚   â”œâ”€â”€ User.js
â”‚   â”‚   â”œâ”€â”€ Team.js
â”‚   â”‚   â”œâ”€â”€ Racer.js
â”‚   â”‚   â”œâ”€â”€ Race.js
â”‚   â”‚   â”œâ”€â”€ RaceEntry.js
â”‚   â”‚   â”œâ”€â”€ LapTime.js
â”‚   â”‚   â”œâ”€â”€ PitStop.js
â”‚   â”‚   â””â”€â”€ Event.js
â”‚   â”‚
â”‚   â”œâ”€â”€ routes/                  # Express routes
â”‚   â”‚   â”œâ”€â”€ authRoutes.js
â”‚   â”‚   â”œâ”€â”€ teamRoutes.js
â”‚   â”‚   â”œâ”€â”€ racerRoutes.js
â”‚   â”‚   â”œâ”€â”€ raceRoutes.js
â”‚   â”‚   â””â”€â”€ eventRoutes.js
â”‚   â”‚
â”‚   â”œâ”€â”€ middleware/
â”‚   â”‚   â”œâ”€â”€ authMiddleware.js    # JWT & role-based protection
â”‚   â”‚   â””â”€â”€ errorMiddleware.js
â”‚   â”‚
â”‚   â”œâ”€â”€ utils/
â”‚   â”‚   â”œâ”€â”€ calculateGaps.js
â”‚   â”‚   â””â”€â”€ constants.js
â”‚   â”‚
â”‚   â”œâ”€â”€ server.js                # Express + Socket.IO entry point
â”‚   â””â”€â”€ package.json
â”‚
â”œâ”€â”€ frontend/
â”‚   â”œâ”€â”€ public/
â”‚   â”‚   â”œâ”€â”€ index.html
â”‚   â”‚   â”œâ”€â”€ favicon.ico
â”‚   â”‚   â””â”€â”€ logos/               # Team/racer logos
â”‚   â”‚
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ api/                 # Axios calls
â”‚   â”‚   â”‚   â”œâ”€â”€ authApi.js
â”‚   â”‚   â”‚   â”œâ”€â”€ teamApi.js
â”‚   â”‚   â”‚   â”œâ”€â”€ racerApi.js
â”‚   â”‚   â”‚   â”œâ”€â”€ raceApi.js
â”‚   â”‚   â”‚   â””â”€â”€ socket.js        # Socket.IO client
â”‚   â”‚   â”‚
â”‚   â”‚   â”œâ”€â”€ components/          # Shared UI components
â”‚   â”‚   â”‚   â”œâ”€â”€ Leaderboard.js
â”‚   â”‚   â”‚   â”œâ”€â”€ RacerCard.js
â”‚   â”‚   â”‚   â”œâ”€â”€ TeamCard.js
â”‚   â”‚   â”‚   â”œâ”€â”€ Navbar.js
â”‚   â”‚   â”‚   â””â”€â”€ Loader.js
â”‚   â”‚   â”‚
â”‚   â”‚   â”œâ”€â”€ pages/               # Main views
â”‚   â”‚   â”‚   â”œâ”€â”€ Admin/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ Dashboard.js
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ RaceControl.js
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ RaceCreate.js
â”‚   â”‚   â”‚   â”‚
â”‚   â”‚   â”‚   â”œâ”€â”€ Owner/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ OwnerDashboard.js
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ TeamRegister.js
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ AddRacers.js
â”‚   â”‚   â”‚   â”‚
â”‚   â”‚   â”‚   â”œâ”€â”€ Viewer/
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ LiveRace.js
â”‚   â”‚   â”‚   â”‚
â”‚   â”‚   â”‚   â”œâ”€â”€ Auth/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ Login.js
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ Register.js
â”‚   â”‚   â”‚   â”‚
â”‚   â”‚   â”‚   â””â”€â”€ Home.js
â”‚   â”‚   â”‚
â”‚   â”‚   â”œâ”€â”€ styles/
â”‚   â”‚   â”‚   â””â”€â”€ index.css        # Tailwind entry
â”‚   â”‚   â”‚
â”‚   â”‚   â”œâ”€â”€ App.js
â”‚   â”‚   â””â”€â”€ index.js
â”‚   â”‚
â”‚   â””â”€â”€ package.json
â”‚
â”œâ”€â”€ .env
â”œâ”€â”€ tailwind.config.js
â”œâ”€â”€ postcss.config.js
â”œâ”€â”€ package.json
â””â”€â”€ README.md



ðŸ“œ Full Descriptive Prompt

The purpose of this system is to design and implement a comprehensive race management platform using the MERN stack with Tailwind CSS for styling. The application will be divided into three major user perspectives: Admin Panel, Team Owner Panel, and Viewer Interface. Each of these perspectives has distinct roles and functions, but all of them are interconnected to simulate the flow of a real-world racing event. The central idea is to allow the admin to fully control race creation, progression, and results; allow team owners to manage their teams and racers; and finally, allow viewers to experience real-time updates of the race leaderboard in a visually dynamic format, much like professional racing broadcasts.

The scope of the project covers user authentication, team and racer registration, race creation, race progression control, pit stop handling, tyre strategy updates, lap tracking, accident and DNF status management, and real-time broadcasting of race events. The functions span from database-level management of entities like teams, racers, and races to user-interface level interaction that provides easy control for admins, structured inputs for team owners, and engaging live race visualizations for viewers.

1. Overall System Scope

The system operates in three main layers:

Data Layer (MongoDB) â€” where teams, racers, races, laps, pit stops, and user accounts are stored.

Application Layer (Express.js + Node.js) â€” where the logic for authentication, race control, team management, pit stop tracking, and race progression resides.

Presentation Layer (React + Tailwind) â€” where each user type interacts with the system.

The Admin Panel manages the entire race life cycle, from initial setup to final results. The Owner Panel gives registered team owners the ability to register their teams, assign racers, and provide essential racer details like name, age, and nationality. The Viewer Interface provides the audience with a live experience of the race, showcasing real-time leaderboard updates, racer positions, pit stop events, lap completions, and retirements.

The system needs to operate with real-time communication, meaning that whenever the admin updates race status (for example, when a racer overtakes another or enters a pit stop), the change should immediately reflect on the viewer side. This is achieved through a combination of socket communication and state synchronization between backend and frontend.

2. Admin Panel Scope and Functions

The Admin Panel is the control room of the entire application. It allows administrators to create races, configure all necessary details, manage live race updates, and finalize results.

Race Creation

When creating a race, the admin is required to enter several essential details. These include the venue, which specifies the circuit or location of the race, the total laps, which defines the race length, and the starting grid, which sets the initial positions of the racers. The admin should also specify the default tyre type that each racer begins with, though this can change as the race progresses. The system must allow the admin to see all the registered teams and racers to assign them to the starting grid.

Race Progression

During the race, the admin should be able to manipulate the positions of racers. For instance, when one racer overtakes another, the admin can drag or reorder the racersâ€™ positions in the interface or use input controls to move them up or down in the leaderboard. This ensures that the live leaderboard displayed to viewers reflects the exact race dynamics.

Lap Management

The admin must have the ability to mark lap completions. When a racer completes a lap, the admin clicks or marks that racerâ€™s progress, updating their lap count. This continues until all laps are complete for the winner. The lap progression should also calculate differences between racers, allowing the system to reflect time gaps, even if manually adjusted.

Pit Stops

Pit stop management is one of the most critical and realistic functions. When a racer enters the pit, the admin can trigger a pit stop action. The system should record the pit stop time, which can either be manually input or automatically calculated based on a standard time with some randomness. After the pit stop, the admin can update the racerâ€™s tyre type to reflect the new strategy. Pit stops should also affect the racerâ€™s position, as they may lose places while stationary.

Accidents and DNF

The admin must also handle unforeseen race incidents such as accidents or retirements. If a racer is involved in an accident or suffers mechanical failure, the admin can mark them with a DNF (Did Not Finish) status. The system should remove that racer from active positions while still retaining their details in the race logs for statistics.

Event Logging and Final Results

Every action performed during the race â€” overtakes, pit stops, lap completions, accidents â€” should be logged as race events. Once the race is complete, the admin finalizes results, which get stored in the database as permanent records. These results may later be used for championship standings, historical records, or post-race analysis.

3. Team Owner Panel Scope and Functions

The Team Owner Panel focuses on team and racer management. Owners are given accounts with login credentials. Once logged in, they are able to create and manage their teams.

Team Registration

Each owner can create one team. The registration form includes inputs such as team name, team logo, and country of origin. The system validates that no duplicate team names exist and ensures that ownership is unique.

Racer Registration

A team can have up to two racers, just like in professional motorsports. When adding racers, the owner must provide name, age, and country. Additional details can be included, such as racing number and profile picture, to enhance presentation. Once registered, racers are stored in the system and associated with their team.

Interaction with Admin

The racers added by team owners become visible to the admin in their panel. This allows the admin to select them for races, assign grid positions, and manage their performance. Owners do not interfere with race control during live events â€” their role ends at racer registration.

Profile Management

Owners should be able to log in and update details such as their team name, logos, or racer details if needed. However, once a race is in progress, such updates should be locked to preserve consistency.

4. Viewer Interface Scope and Functions

The Viewer Interface is purely read-only and designed to mimic the professional race leaderboard style, such as those seen in Formula 1 broadcasts. Its purpose is to make the race exciting and visually appealing to the audience.

Real-Time Leaderboard

The leaderboard displays all active racers, their positions, lap counts, tyre types, pit stop history, and time gaps. Whenever the admin updates the race from their panel, the changes propagate to viewers in real time. For example, if the admin moves a racer up due to an overtake, the viewer immediately sees the new position.

Race Progression Indicators

The viewer interface should include race progression details such as:

Current lap out of total laps (e.g., Lap 23/57)

Racerâ€™s current tyre type (Soft, Medium, Hard)

Number of pit stops and time spent in each

Gaps between racers in seconds

DNF status for any retired racers

Visual Styling

The UI should be styled to resemble real-world race graphics, using team logos, racer country flags, and clear color coding for tyre compounds. Tailwind CSS ensures a sleek, modern interface that is also responsive across devices.

5. System Entities and Functions

To tie the three perspectives together, the system relies on several core entities:

User: Can be an admin or owner, with role-based access.

Team: Created by owners, containing metadata and associated racers.

Racer: Belongs to a team, carries details such as name, age, nationality, racing number.

Race: Created by admin, containing details like venue, total laps, and participating racers.

RaceEntry: Links a racer to a specific race, storing their grid position, tyre type, and performance.

LapTime: Tracks lap completion for each racer.

PitStop: Records pit stop events, tyre changes, and time lost.

Event: Logs any race activity such as overtakes, DNFs, or pit stops.

Each of these entities has functions tied to the perspectives. For example, owners create teams and racers, while admins create races and manipulate RaceEntries, and viewers only read aggregated events and race status.

6. Additional Considerations

The system should handle authentication and authorization to separate roles clearly. Owners must not access admin functions, and viewers should not require login to watch races. Error handling and input validation are critical to avoid inconsistencies in race data.

Real-time updates are best managed through WebSockets, ensuring that when the admin changes race status, it is instantly pushed to connected viewers. For scalability, events can be logged sequentially, so that if a viewer joins midway, they can reconstruct the race progression.

The scope also includes designing the system to be extensible. In the future, features like championship standings, race history, or multi-race seasons can be added with minimal changes to the structure.